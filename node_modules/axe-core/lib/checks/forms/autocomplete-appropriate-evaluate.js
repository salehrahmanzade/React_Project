import { autocomplete, sanitize } from '../../commons/text';
import { validInputTypes } from '../../core/utils';

function autocompleteAppropriateEvaluate(node, options, virtualNode) {
	// Select and textarea is always allowed
	if (virtualNode.props.nodeName !== 'input') {
		return true;
	}

	const number = ['text', 'search', 'number', 'tel'];
	const url = ['text', 'search', 'url'];
	const allowedTypesMap = {
		bday: ['text', 'search', 'date'],
		email: ['text', 'search', 'email'],
		'street-address': ['text'], // Issue: https://github.com/dequelabs/axe-core/issues/1161
		tel: ['text', 'search', 'tel'],
		'tel-country-code': ['text', 'search', 'tel'],
		'tel-national': ['text', 'search', 'tel'],
		'tel-area-code': ['text', 'search', 'tel'],
		'tel-local': ['text', 'search', 'tel'],
		'tel-local-prefix': ['text', 'search', 'tel'],
		'tel-local-suffix': ['text', 'search', 'tel'],
		'tel-extension': ['text', 'search', 'tel'],
		'cc-number': number,
		'cc-exp': ['text', 'search', 'month', 'tel'],
		'cc-exp-month': number,
		'cc-exp-year': number,
		'cc-csc': number,
		'transaction-amount': number,
		'bday-day': number,
		'bday-month': number,
		'bday-year': number,
		'new-password': ['text', 'search', 'password'],
		'current-password': ['text', 'search', 'password'],
		url: url,
		photo: url,
		impp: url
	};

	if (typeof options === 'object') {
		// Merge in options
		Object.keys(options).forEach(key => {
			if (!allowedTypesMap[key]) {
				allowedTypesMap[key] = [];
			}
			allowedTypesMap[key] = allowedTypesMap[key].concat(options[key]);
		});
	}

	const autocompleteAttr = virtualNode.attr('autocomplete');
	const autocompleteTerms = autocompleteAttr
		.split(/\s+/g)
		.map(term